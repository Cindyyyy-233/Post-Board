{"version":3,"sources":["logo.svg","tweets/component.js","lookup/component.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadTweets","alert","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","userLike","UserLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","document","getElementById","ReactDOM","render","StrictMode","tweetsEl"],"mappings":"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","file":"static/js/main.774cfa0a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from 'react'\nimport { loadTweets } from '../lookup'\n\nexport function TweetsComponent(props) {\n    const textAreaRef = React.createRef()\n    const [newTweets, setNewTweets] = useState([])\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        let tempNewTweets = [...newTweets]\n        tempNewTweets.unshift({ //add to the begining of the array\n            content: newVal,\n            likes:0,\n            id: 12313\n        })\n        setNewTweets(tempNewTweets)\n        textAreaRef.current.value = ''\n    }\n\n    return <div className={props.className}>\n        <div className='col-12 mb-3'>\n            <form onSubmit={handleSubmit}>\n                <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n                </textarea>\n                <button type='submit' className='btn btn-primary my-3'> Tweet </button>\n            </form>\n        </div>\n        <TweetsList newTweets = {newTweets}/>\n    </div>\n}\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    //setTweetsInit([...props.newTweets].concat(tweetsInit))\n    useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length) {\n            setTweets(final)\n        }\n    }, [props.newTweets, tweets, tweetsInit])\n    useEffect(() => {\n        const myCallback = (response, status) => {\n            if (status === 200) {\n                setTweetsInit(response)\n            } else {\n                alert(\"There was an error\")\n            }\n        }\n        loadTweets(myCallback)\n    }, [])\n    return tweets.map((item, index) => {\n        return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\n    })\n}\n\nexport function ActionBtn(props) {\n    const { tweet, action } = props\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [UserLike, setUserLike] = useState(tweet.userLike === true ? true : false)\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n\n    const handleClick = (event) => {\n        event.preventDefault()\n        if (action.type === 'like') {\n            if (UserLike === true) {\n                setLikes(likes - 1)\n                setUserLike(false)\n            } else {\n                setLikes(tweet.likes + 1)\n                setUserLike(true)\n            }\n        }\n    }\n    const display = action.type === 'like' ? `${likes} ${action.display}` : actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n}\n\nexport function Tweet(props) {\n    const { tweet } = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className={className}>\n        <p>{tweet.id} - {tweet.content}</p>\n        <div className='btn btn-group'>\n            <ActionBtn tweet={tweet} action={{ type: \"like\", display: 'Likes' }} />\n            <ActionBtn tweet={tweet} action={{ type: \"unlike\", display: 'Unlike' }} />\n            <ActionBtn tweet={tweet} action={{ type: \"retweet\", display: 'Retweet' }} />\n        </div>\n    </div>\n}","import React, {useEffect, useState} from 'react'\n\nexport function loadTweets(callback) {\n    const xhr = new XMLHttpRequest()\n    const method = 'GET'\n    const url = \"http://localhost:8000/api/tweets/\"\n    const reponseType = \"json\"\n  \n    xhr.responseType = reponseType\n    xhr.open(method, url)\n    xhr.onload = function () {\n        callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function(e) {\n      console.log(e)\n      callback({\"message\": \"The request was an error\"}, 400)\n    }\n    xhr.send()\n}","import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent/>\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from './tweets'\nimport reportWebVitals from './reportWebVitals';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>);\n}\n\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl) {\n  ReactDOM.render(<TweetsComponent/>, tweetsEl);\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}